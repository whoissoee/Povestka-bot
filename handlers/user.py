from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

from aiogram.fsm.context import FSMContext

from signature import user, bot
import keyboards.inline_kb as kb
from config import price_services, admin_list
from handlers.text import user_start, service_text, questions

router = Router()


@router.message(CommandStart())
async def cmd_start(msg: Message):
    if msg.from_user.id in admin_list:
        await msg.answer("–í—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", reply_markup=kb.menu_admin)
    else:
        await msg.answer(user_start, reply_markup=kb.menu_user())
        if not await user.check_user(user_id=msg.from_user.id):
            await user.add_user(user_id=msg.from_user.id,  username=msg.from_user.username)


@router.callback_query(F.data  == 'services')
async def cmd_services(call: CallbackQuery):
    await call.message.edit_text(service_text, reply_markup=kb.menu_services())


@router.callback_query(F.data == 'support')
async def cmd_support(call: CallbackQuery):

    service_info = price_services.get(call.data, {})
    price = service_info.get("price", "")
    support = service_info.get("text", "")

    await call.message.edit_text(
        f"""üéì<b><u>{support}</u></b>\n
‚ÑπÔ∏è–≠—Ç–∞ —É—Å–ª—É–≥–∞ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å <b>–Ω–µ–ø—Ä–∏–∑—ã–≤–Ω—ã–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ–º</b> –∏–ª–∏ –¥—Ä—É–≥–∏–º <b>–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º</b> –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ç –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã –∏ <b>–∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.</b>\n
<b>–í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ –≤–∞—Å –æ–∂–∏–¥–∞–µ—Ç:</b>\n
üìå<b>–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤–æ–µ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –æ—Ç—Å—Ä–æ—á–∫–∏;\n
üìå–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –Ω–µ–≥–æ–¥–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–ª–µ–∑–Ω–∏;\n
üìå–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –≤–æ–µ–Ω–∫–æ–º–∞—Ç—ã, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏;\n
üìå–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∂–∞–ª–æ–± –≤ –≤—ã—à–µ—Å—Ç–æ—è—â–∏–π –†–í–ö –∏–ª–∏ —Å—É–¥ –ø–µ—Ä–≤–æ–π –∏ –≤—ã—à–µ—Å—Ç–æ—è—â–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Ü–∏–π.</b>\n
üîñ<u>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç</u> <s>600</s> <b>{price}.</b>""", reply_markup=kb.menu_support(services=call.data)
    )


@router.callback_query(F.data == 'ind_cons')
async def cmd_ind_cons(call: CallbackQuery):

    service_info = price_services.get(call.data, {})
    price = service_info.get("price", "")
    support = service_info.get("text", "")

    await call.message.edit_text(
        f"""<b><u>{support}</u></b>\n
–í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
üìå –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—Ä–∏–∑—ã–≤–∞ –Ω–∞ —Å—Ä–æ—á–Ω—É—é –≤–æ–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É, –ø–µ—Ä–µ–æ—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤–æ–ø—Ä–æ—Å—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞;\n
üìå –æ—Ü–µ–Ω–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–∞—á–∞–º–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ø—Ä–∏–∑—ã–≤–Ω—ã—Ö –ø–∞—Ç–æ–ª–æ–≥–∏–π, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏\n
üìå —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–∫–∞–∫ –æ–Ω–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –∏ –≥–¥–µ –æ–Ω–æ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤–æ–≤—Å–µ) —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –ø—Ä–∞–≤–æ–≤—ã–µ –∞–∫—Ç—ã –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏\n
üìå –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–µ—Ä–µ–¥ —è–≤–∫–æ–π –≤ –≤–æ–µ–Ω–∫–æ–º–∞—Ç\n
üìå –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ —É—Å–ª—É–≥ ¬´–í–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç¬ª –∏ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª\n
<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</b>
40 –º–∏–Ω—É—Ç\n
<b>–§–æ—Ä–º–∞—Ç</b>
üìû –ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
ü§ù –î–∏–∞–ª–æ–≥ –±–µ–∑ —Ñ–æ—Ä–º–∞–ª–∏–∑–º–∞\n
<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å</b>
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n
<b>üîñ<u>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏</u></b>
{price} (1 usdt ~ 1 usd)\n
üö®<b>UPD 06.04.24: –ø–æ –≤—Å–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Ç–æ–∂–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∂–∞—Ç—É—é –ø–∏—Å—å–º–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>""", reply_markup=kb.menu_support(services=call.data)
    )


@router.callback_query(F.data == 'military_ticket')
async def cmd_military_ticket(call: CallbackQuery):

    service_info = price_services.get(call.data, {})
    price = service_info.get("price", "")
    support = service_info.get("text", "")
    
    await call.message.delete()
    await call.message.answer(
        f"""<b><u>{support}</u></b>\n
<i>–£—Å–ª—É–≥–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —é—Ä–∏—Å—Ç–∞ –Ω–∞ –ø—É—Ç–∏ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –æ—Ç—Å—Ä–æ—á–∫–∏ –∏–ª–∏ –≤–æ–µ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞.</i>\n
<b>–í –¥–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –≤—Ö–æ–¥–∏—Ç:</b>\n
üìå –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤–æ–µ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –æ—Ç—Å—Ä–æ—á–∫–∏;\n
üìå –∏–∑—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π;\n
üìå –ø–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –†–í–ö –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º—É –æ—Å–Ω–æ–≤–∞–Ω–∏—é;\n
üìå –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ –†–í–ö –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–¥. –∫–æ–º–∏—Å—Å–∏–∏ –≤ –≤–æ–µ–Ω–∫–æ–º–∞—Ç–µ;\n
üìå –ø–æ–º–æ—â—å –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–± –≤ –≤—ã—à–µ—Å—Ç–æ—è—â–∏–π –†–í–ö –∏–ª–∏ —Å—É–¥ –ø–µ—Ä–≤–æ–π –∏ –≤—ã—à–µ—Å—Ç–æ—è—â–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Ü–∏–π.\n
<u><b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏</b></u> <s>1500</s> <b>{price}</b>.""", reply_markup=kb.menu_support(services=call.data)
    )


@router.callback_query(F.data == 'faq')
async def cmd_faq(call: CallbackQuery):
    await call.message.edit_text("<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>")
    for question in questions:
        await call.message.answer(question)

    await call.message.answer("–û —á–µ–º –í–∞–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å?", reply_markup=kb.menu_user())


@router.callback_query(F.data.casefold().in_(['back_services', 'back_support']))
async def cmd_back_all(call: CallbackQuery):
    if call.data == 'back_services':
        await call.message.edit_text(user_start, reply_markup=kb.menu_user())

    if call.data == 'back_support':
        await call.message.edit_text(service_text, reply_markup=kb.menu_services())


@router.callback_query(F.data.casefold().in_(['meneger', 'change_cripto']))
async def cmd_send_meneger(call: CallbackQuery):
    await call.message.edit_text("üóû–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∂–µ–ª–∞–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å.", reply_markup=kb.menu)


@router.callback_query(F.data == 'reviews')
async def cmd_reviews(call: CallbackQuery, state: FSMContext):
    info = await user.get_reviews()
    await state.update_data(info=info)
    await call.message.delete()
    await call.message.answer_photo(photo=info[0][0], caption=info[0][1], reply_markup=kb.pagination(page=0))


@router.callback_query(F.data.startswith(('next_', 'prev_')))
async def cmd_pagination(call: CallbackQuery, state: FSMContext):
    action, page = call.data.split("_")
    page = int(page)

    data = await state.get_data()
    info = data['info']

    if action == 'next':
        page = page + 1 if page < (len(info) - 1) else page
    if action  == 'prev':
        page = page - 1 if page > 0 else 0

    await call.message.delete()
    await bot.send_photo(call.from_user.id, photo=info[page][0], caption=info[page][1], reply_markup=kb.pagination(page=page))
